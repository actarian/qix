{"version":3,"sources":["src/js/howler.js"],"names":["HowlerGlobal","this","init","prototype","self","Howler","_counter","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","mobileAutoEnable","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_enableMobileAudio","isMobile","test","isTouch","maxTouchPoints","msMaxTouchPoints","_mobileEnabled","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","addEventListener","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","then","_resumeAfterSuspend","_emit","Howl","o","src","console","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhrWithCredentials","xhrWithCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onresume","push","event","action","play","load","url","str","exec","toLowerCase","warn","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","Promise","runLoadQueue","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","stop","noteOff","_cleanBuffer","isNaN","arguments","_interval","args","index","indexOf","apply","fade","from","to","len","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","min","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","realTime","playing","rateSeek","emitSeek","sounds","_errorFn","_loadFn","splice","remCache","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","xhr","XMLHttpRequest","open","withCredentials","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","define","amd","exports","global","_super","_pos","_orientation","stereo","pan","pos","x","y","z","setPosition","orientation","xUp","yUp","zUp","or","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner"],"mappings":"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","file":"docs\\js\\vendors.min.js","sourcesContent":["/*!\n *  howler.js v2.0.9\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto iOS enabler.\n      self.mobileAutoEnable = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'running' : 'running';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Mobile browsers will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _enableMobileAudio: function() {\n      var self = this || Howler;\n\n      // Only run this on mobile devices if audio isn't already eanbled.\n      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);\n      var isTouch = !!(('ontouchend' in window) || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));\n      if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {\n        return;\n      }\n\n      self._mobileEnabled = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function() {\n        // Fix Android can not play in suspend state.\n        Howler._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._mobileEnabled = true;\n          self.mobileAutoEnable = false;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio on iOS.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {\n        Howler._enableMobileAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        var num = 0;\n        for (var i=0; i<self._sounds.length; i++) {\n          if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n            num++;\n            id = self._sounds[i]._id;\n          }\n        }\n\n        if (num === 1) {\n          sprite = null;\n        } else {\n          id = null;\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Makr this sounded as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n      // Update the parameters of the sound\n      sound._paused = false;\n      sound._ended = false;\n      sound._sprite = sprite;\n      sound._seek = seek;\n      sound._start = self._sprite[sprite][0] / 1000;\n      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Mobile browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (typeof Promise !== 'undefined' && play instanceof Promise) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Releases the lock and executes queued actions.\n              var runLoadQueue = function() {\n                self._playLock = false;\n                if (!internal) {\n                  self._emit('play', sound._id);\n                }\n              };\n              play.then(runLoadQueue, runLoadQueue);\n            } else if (!internal) {\n              self._emit('play', sound._id);\n            }\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default') {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Make sure the volume is in the right bounds.\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol);\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            sound._rateSeek = self.seek(id[i]);\n            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Restart the playback if the sound was playing.\n          if (playing) {\n            self.play(id, true);\n          }\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node) {\n            sound._node.currentTime = seek;\n          }\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                self._emit('seek', id);\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            self._emit('seek', id);\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n          if (!checkIE) {\n            sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n          }\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n\n        // Remove the references in the global Howler object.\n        var index = Howler._howls.indexOf(self);\n        if (index >= 0) {\n          Howler._howls.splice(index, 1);\n        }\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n\n      if (Howler._scratchBuffer) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n      }\n      node.bufferSource = null;\n\n      return self;\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else {\n        self._node = new Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Decode the buffer into an audio source.\n    Howler.ctx.decodeAudioData(arraybuffer, function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      }\n    }, function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    });\n  };\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.0.9\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  \n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n      self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n      self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              sound._panner.setPosition(pan, 0, 0);\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setPosition(x, y, z);\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setOrientation(x, y, z);\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   * \n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n      sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n"]}